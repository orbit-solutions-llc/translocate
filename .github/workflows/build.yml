name: Build translocate

on:
  push:
    tags: ['v*.*.*']

jobs:
  build-translocate:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run tests
      run: cargo test --verbose

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get -y install gcc-mingw-w64-x86-64 gcc-mingw-w64-i686
        rustup target add i686-pc-windows-gnu
        rustup target add x86_64-pc-windows-gnu
        rustup target add x86_64-unknown-linux-gnu
        rustup target add x86_64-apple-darwin
        rustup target add aarch64-apple-darwin

        mkdir dist
        mkdir builds

    - name: Install Mac OS dependencies
      if: steps.cache-macos.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/tpoechtrager/osxcross
        cd osxcross
        sudo tools/get_dependencies.sh
        wget -nc https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX11.3.sdk.tar.xz
        mv MacOSX11.3.sdk.tar.xz tarballs/
        UNATTENDED=yes OSX_VERSION_MIN=11.0 MACOSX_DEPLOYMENT_TARGET=11 ./build.sh

    - name: Build Mac OS
      run: |
        cp .cargo/config.toml.ci .cargo/config.toml
        export PATH="$(pwd)/osxcross/target/bin:$PATH"
        export LIBZ_SYS_STATIC=1
        export CC=o64-clang
        export CXX=o64-clang++
        cargo build --release --target=x86_64-apple-darwin
        mkdir builds/translocate-macos-x86_64
        cp target/x86_64-apple-darwin/release/translocate builds/translocate-macos-x86_64
        tar -C builds -czvf dist/translocate-macos-x86_64.tar.gz translocate-macos-x86_64
        export CC=oa64-clang
        export CXX=oa64-clang++
        cargo build --release --target=aarch64-apple-darwin
        mkdir builds/translocate-macos-aarch64
        cp target/aarch64-apple-darwin/release/translocate builds/translocate-macos-aarch64
        tar -C builds -czvf dist/translocate-macos-aarch64.tar.gz translocate-macos-aarch64

    - name: Cache Mac OS dependencies
      id: cache-macos
      uses: actions/cache@v3
      with:
        path: osxcross
        key: ${{ runner.os }}-osxcross

    - name: Build Win64
      run: |
        cargo rustc --release --target=x86_64-pc-windows-gnu -- -C linker=x86_64-w64-mingw32-gcc -C strip=symbols -C lto=true -C opt-level=z -C codegen-units=1
        mkdir builds/translocate-win64
        cp target/x86_64-pc-windows-gnu/release/translocate.exe builds/translocate-win64
        tar -C builds -czvf dist/translocate-win64.tar.gz translocate-win64

    - name: Build Win32
      run: |
        cargo rustc --release --target=i686-pc-windows-gnu -- -C linker=i686-w64-mingw32-gcc -C link-args=-mwindows -C panic=abort -C strip=symbols -C lto=true -C opt-level=z -C codegen-units=1
        mkdir builds/translocate-win32
        cp target/i686-pc-windows-gnu/release/translocate.exe builds/translocate-win32
        tar -C builds -czvf dist/translocate-win32.tar.gz translocate-win32

    - name: Build Linux
      run: |
        cargo rustc --release --target=x86_64-unknown-linux-gnu -- -C strip=symbols -C lto=true -C opt-level=z -C codegen-units=1
        mkdir builds/translocate-linux
        cp target/x86_64-unknown-linux-gnu/release/translocate builds/translocate-linux
        tar -C builds -czvf dist/translocate-linux.tar.gz translocate-linux

    - name: Upload release
      uses: softprops/action-gh-release@v1
      with:
        body_path: RELEASE_NOTES.md
        files: |
          dist/translocate-win64.tar.gz
          dist/translocate-win32.tar.gz
          dist/translocate-linux.tar.gz
          dist/translocate-macos-aarch64.tar.gz
          dist/translocate-macos-x86_64.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish npm package
      env:
        NPM_ACCESS_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
      run: |
        echo "//registry.npmjs.org/:_authToken=$NPM_ACCESS_TOKEN" > ".npmrc"
        npm publish

    # - name: Publish cargo package
    #   env:
    #     CARGO_ACCESS_TOKEN: ${{ secrets.CARGO_ACCESS_TOKEN }}
    #   run: |
    #     cargo login "$CARGO_ACCESS_TOKEN"
    #     cargo publish
